// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from demo.babel


using System;
using System.Collections.Generic;

namespace BabelRpc.Demo
{ 
	/// <summary>
	///  The LogControl service allows you to fetch information about a log, set the logging status, or
	///  see the logging status for all logs
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public interface ILogControl
	{ 
		/// <summary>
		/// Gets the status of a single log
		/// </summary>
		/// <param name="logName"> The name of the log</param>
		State? GetLogStatus(string logName);

		/// <summary>
		/// Sets the status for a single log
		/// </summary>
		/// <param name="logName"> Name of the log</param>
		/// <param name="state"> state to assign</param>
		void SetLogStatus(string logName, State? state);

		/// <summary>
		/// Set multiple statuses at once.
		/// </summary>
		/// <param name="data"> data structure containing map of statuses to set</param>
		/// <param name="logLevel"></param>
		Info SetMulti(Info data, int? logLevel);

		/// <summary>
		/// Returns the status of all logs
		/// </summary>
		Info GetLoggingStatus();

		/// <summary>
		/// Add a joke
		/// </summary>
		/// <param name="joke"> A nice work-friendly joke</param>
		void AddJoke(Joke joke);
	}
	/// <summary>
	///  The LogControl service allows you to fetch information about a log, set the logging status, or
	///  see the logging status for all logs
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public interface ILogControlAsync
	{ 
		/// <summary>
		/// Gets the status of a single log
		/// </summary>
		/// <param name="logName"> The name of the log</param>
		System.Threading.Tasks.Task<State?> GetLogStatusAsync(string logName);

		/// <summary>
		/// Sets the status for a single log
		/// </summary>
		/// <param name="logName"> Name of the log</param>
		/// <param name="state"> state to assign</param>
		System.Threading.Tasks.Task SetLogStatusAsync(string logName, State? state);

		/// <summary>
		/// Set multiple statuses at once.
		/// </summary>
		/// <param name="data"> data structure containing map of statuses to set</param>
		/// <param name="logLevel"></param>
		System.Threading.Tasks.Task<Info> SetMultiAsync(Info data, int? logLevel);

		/// <summary>
		/// Returns the status of all logs
		/// </summary>
		System.Threading.Tasks.Task<Info> GetLoggingStatusAsync();

		/// <summary>
		/// Add a joke
		/// </summary>
		/// <param name="joke"> A nice work-friendly joke</param>
		System.Threading.Tasks.Task AddJokeAsync(Joke joke);
	}
}
