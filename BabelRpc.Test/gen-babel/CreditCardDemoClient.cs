// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from CreditCardDemo.babel
// Test Case
// Fake storing and manipulations with demo credit card numbers


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BabelRpc;

namespace BabelRpc.Demo
{

	/// <summary>
	///  Manipulates with demo credit card info
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public class DemoCCClient : BabelClientBase, IDemoCC, IDemoCCAsync
	{
		/// <summary>
		/// Client class constructor
		/// </summary>
		/// <param name="baseUrl">Base service URL</param>
		/// <param name="timeoutSeconds">Timeout in seconds</param>
		public DemoCCClient(string baseUrl, int timeoutSeconds = 120) : base(new HttpTransport(new BabelJsonSerializer(), HttpTransport.ConcatUrl(baseUrl, "DemoCC"), timeoutSeconds, "application/json", "application/json")) { }

		/// <summary>
		/// Client class constructor that can be used for unit testing
		/// </summary>
		/// <param name="transport">[Mock] transport object</param>
		public DemoCCClient(IBabelTransport transport)  : base(transport) { } 

#region Synchronous methods

		/// <summary>
		/// Validates CC info and pretends to save it
		/// </summary>
		/// <param name="cardInfo"></param>
		public void Save (CreditCard cardInfo)
		{
			Send("Save", new Dictionary<string, object>() { {"cardInfo", cardInfo } });
		}

		/// <summary>
		/// Gets random demo CC info of given kind
		/// </summary>
		/// <param name="kind"></param>
		public CreditCard GetRandomCard (CCKind? kind)
		{
			return MakeRequestAndDeserialize<CreditCard>("GetRandomCard", new Dictionary<string, object>() { {"kind", kind } });
		}

#endregion
#region Asynchronous methods

		/// <summary>
		/// Validates CC info and pretends to save it
		/// </summary>
		/// <param name="cardInfo"></param>
		public Task SaveAsync (CreditCard cardInfo)
		{
			return SendAsync("Save", new Dictionary<string, object>() { {"cardInfo", cardInfo } });
		}

		/// <summary>
		/// Gets random demo CC info of given kind
		/// </summary>
		/// <param name="kind"></param>
		public Task<CreditCard> GetRandomCardAsync (CCKind? kind)
		{
			return MakeRequestAndDeserializeAsync<CreditCard>("GetRandomCard", new Dictionary<string, object>() { {"kind", kind } });
		}

#endregion
	}

}
