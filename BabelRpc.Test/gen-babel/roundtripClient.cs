// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from roundtrip.babel
// Test Case
// Roundtrip all types


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BabelRpc;

namespace BabelRpc.Demo
{

	/// <summary>
	///  Roundtripper service - see if the data you send it actually comes
	///  back in one piece!
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public class RoundtripperClient : BabelClientBase, IRoundtripper, IRoundtripperAsync
	{
		/// <summary>
		/// Client class constructor
		/// </summary>
		/// <param name="baseUrl">Base service URL</param>
		/// <param name="timeoutSeconds">Timeout in seconds</param>
		public RoundtripperClient(string baseUrl, int timeoutSeconds = 120) : base(new HttpTransport(new BabelJsonSerializer(), HttpTransport.ConcatUrl(baseUrl, "Roundtripper"), timeoutSeconds, "application/json", "application/json")) { }

		/// <summary>
		/// Client class constructor that can be used for unit testing
		/// </summary>
		/// <param name="transport">[Mock] transport object</param>
		public RoundtripperClient(IBabelTransport transport)  : base(transport) { } 

#region Synchronous methods

		/// <summary>
		/// Return back what was sent, changing it if desried
		/// </summary>
		/// <param name="wholesome"> Send in a wholesome data structure</param>
		/// <param name="alter"> Indicates if you want to change it</param>
		public Wholesome SendReceive (Wholesome wholesome, bool? alter)
		{
			return MakeRequestAndDeserialize<Wholesome>("SendReceive", new Dictionary<string, object>() { {"wholesome", wholesome }, {"alter", alter } });
		}

		/// <summary>
		/// Send me some data - I know just what to do with it
		/// </summary>
		/// <param name="wholesome"> Some nice data to file away </param>
		public void Send (Wholesome wholesome)
		{
			Send("Send", new Dictionary<string, object>() { {"wholesome", wholesome } });
		}

		/// <summary>
		/// I'll send you back some data similar to what you sent
		/// </summary>
		public Wholesome Receive ()
		{
			return MakeRequestAndDeserialize<Wholesome>("Receive", new Dictionary<string, object>() {  });
		}

		/// <summary>
		/// Returns a DefaultTest struct with the X value nulled out
		/// </summary>
		public DefaultTest ReturnNulledDefault ()
		{
			return MakeRequestAndDeserialize<DefaultTest>("ReturnNulledDefault", new Dictionary<string, object>() {  });
		}

		/// <summary>
		/// Accepts a DefaultTest struct and verifies that X is 32
		/// </summary>
		/// <param name="d"></param>
		public bool? AcceptNulledDefault (DefaultTest d)
		{
			return MakeRequestAndDeserialize<bool?>("AcceptNulledDefault", new Dictionary<string, object>() { {"d", d } });
		}

		/// <summary>
		/// Let's be exceptional
		/// </summary>
		public bool? Fail ()
		{
			return MakeRequestAndDeserialize<bool?>("Fail", new Dictionary<string, object>() {  });
		}

#endregion
#region Asynchronous methods

		/// <summary>
		/// Return back what was sent, changing it if desried
		/// </summary>
		/// <param name="wholesome"> Send in a wholesome data structure</param>
		/// <param name="alter"> Indicates if you want to change it</param>
		public Task<Wholesome> SendReceiveAsync (Wholesome wholesome, bool? alter)
		{
			return MakeRequestAndDeserializeAsync<Wholesome>("SendReceive", new Dictionary<string, object>() { {"wholesome", wholesome }, {"alter", alter } });
		}

		/// <summary>
		/// Send me some data - I know just what to do with it
		/// </summary>
		/// <param name="wholesome"> Some nice data to file away </param>
		public Task SendAsync (Wholesome wholesome)
		{
			return SendAsync("Send", new Dictionary<string, object>() { {"wholesome", wholesome } });
		}

		/// <summary>
		/// I'll send you back some data similar to what you sent
		/// </summary>
		public Task<Wholesome> ReceiveAsync ()
		{
			return MakeRequestAndDeserializeAsync<Wholesome>("Receive", new Dictionary<string, object>() {  });
		}

		/// <summary>
		/// Returns a DefaultTest struct with the X value nulled out
		/// </summary>
		public Task<DefaultTest> ReturnNulledDefaultAsync ()
		{
			return MakeRequestAndDeserializeAsync<DefaultTest>("ReturnNulledDefault", new Dictionary<string, object>() {  });
		}

		/// <summary>
		/// Accepts a DefaultTest struct and verifies that X is 32
		/// </summary>
		/// <param name="d"></param>
		public Task<bool?> AcceptNulledDefaultAsync (DefaultTest d)
		{
			return MakeRequestAndDeserializeAsync<bool?>("AcceptNulledDefault", new Dictionary<string, object>() { {"d", d } });
		}

		/// <summary>
		/// Let's be exceptional
		/// </summary>
		public Task<bool?> FailAsync ()
		{
			return MakeRequestAndDeserializeAsync<bool?>("Fail", new Dictionary<string, object>() {  });
		}

#endregion
	}

}
