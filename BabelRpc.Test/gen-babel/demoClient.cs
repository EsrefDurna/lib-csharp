// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from demo.babel
// Test Case
// Stores service status for later use


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BabelRpc;

namespace BabelRpc.Demo
{

	/// <summary>
	///  The LogControl service allows you to fetch information about a log, set the logging status, or
	///  see the logging status for all logs
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public class LogControlClient : BabelClientBase, ILogControl, ILogControlAsync
	{
		/// <summary>
		/// Client class constructor
		/// </summary>
		/// <param name="baseUrl">Base service URL</param>
		/// <param name="timeoutSeconds">Timeout in seconds</param>
		public LogControlClient(string baseUrl, int timeoutSeconds = 120) : base(new HttpTransport(new BabelJsonSerializer(), HttpTransport.ConcatUrl(baseUrl, "LogControl"), timeoutSeconds, "application/json", "application/json")) { }

		/// <summary>
		/// Client class constructor that can be used for unit testing
		/// </summary>
		/// <param name="transport">[Mock] transport object</param>
		public LogControlClient(IBabelTransport transport)  : base(transport) { } 

#region Synchronous methods

		/// <summary>
		/// Gets the status of a single log
		/// </summary>
		/// <param name="logName"> The name of the log</param>
		public State? GetLogStatus (string logName)
		{
			return MakeRequestAndDeserialize<State?>("GetLogStatus", new Dictionary<string, object>() { {"logName", logName } });
		}

		/// <summary>
		/// Sets the status for a single log
		/// </summary>
		/// <param name="logName"> Name of the log</param>
		/// <param name="state"> state to assign</param>
		public void SetLogStatus (string logName, State? state)
		{
			Send("SetLogStatus", new Dictionary<string, object>() { {"logName", logName }, {"state", state } });
		}

		/// <summary>
		/// Set multiple statuses at once.
		/// </summary>
		/// <param name="data"> data structure containing map of statuses to set</param>
		/// <param name="logLevel"></param>
		public Info SetMulti (Info data, int? logLevel = null)
		{
			return MakeRequestAndDeserialize<Info>("SetMulti", new Dictionary<string, object>() { {"data", data }, {"logLevel", logLevel } });
		}

		/// <summary>
		/// Returns the status of all logs
		/// </summary>
		public Info GetLoggingStatus ()
		{
			return MakeRequestAndDeserialize<Info>("GetLoggingStatus", new Dictionary<string, object>() {  });
		}

		/// <summary>
		/// Add a joke
		/// </summary>
		/// <param name="joke"> A nice work-friendly joke</param>
		public void AddJoke (Joke joke)
		{
			Send("AddJoke", new Dictionary<string, object>() { {"joke", joke } });
		}

#endregion
#region Asynchronous methods

		/// <summary>
		/// Gets the status of a single log
		/// </summary>
		/// <param name="logName"> The name of the log</param>
		public Task<State?> GetLogStatusAsync (string logName)
		{
			return MakeRequestAndDeserializeAsync<State?>("GetLogStatus", new Dictionary<string, object>() { {"logName", logName } });
		}

		/// <summary>
		/// Sets the status for a single log
		/// </summary>
		/// <param name="logName"> Name of the log</param>
		/// <param name="state"> state to assign</param>
		public Task SetLogStatusAsync (string logName, State? state)
		{
			return SendAsync("SetLogStatus", new Dictionary<string, object>() { {"logName", logName }, {"state", state } });
		}

		/// <summary>
		/// Set multiple statuses at once.
		/// </summary>
		/// <param name="data"> data structure containing map of statuses to set</param>
		/// <param name="logLevel"></param>
		public Task<Info> SetMultiAsync (Info data, int? logLevel = null)
		{
			return MakeRequestAndDeserializeAsync<Info>("SetMulti", new Dictionary<string, object>() { {"data", data }, {"logLevel", logLevel } });
		}

		/// <summary>
		/// Returns the status of all logs
		/// </summary>
		public Task<Info> GetLoggingStatusAsync ()
		{
			return MakeRequestAndDeserializeAsync<Info>("GetLoggingStatus", new Dictionary<string, object>() {  });
		}

		/// <summary>
		/// Add a joke
		/// </summary>
		/// <param name="joke"> A nice work-friendly joke</param>
		public Task AddJokeAsync (Joke joke)
		{
			return SendAsync("AddJoke", new Dictionary<string, object>() { {"joke", joke } });
		}

#endregion
	}

}
