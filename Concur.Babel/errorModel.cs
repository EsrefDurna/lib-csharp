// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from /Users/michael/gocode/etc/babeltemplates/error.babel
// Babel's Error Format
// Copyright (C) 2015 The Babel Authors

using System;
using System.Collections.Generic;
using System.Text;
using Concur.Babel;

namespace Concur.Babel
{

	/// <summary>
	///  Error defines a single error message and code that might be localized
	///  and displayed to a caller.
	/// </summary>
	public class Error : IBabelModel
	{
		/// <summary>
		/// Default constructor
		/// </summary>
		public Error()
		{ 
			Params = new List<string>();
		}

		/// <summary>
		///  The service-specific error code
		/// </summary>
		public string Code { get; set; }

		/// <summary>
		///  The text of the error in US-English
		/// </summary>
		public string Message { get; set; }

		/// <summary>
		///  The list of parameters to the error message. This could be used by
		///  localization systems to generate messages based on the error code.
		/// </summary>
		public List<string> Params { get; set; }

		public override string ToString()
		{
			var ser = new BabelJsonSerializer();
			using(var strm = (System.IO.MemoryStream)ser.Serialize(this))
			{
				return (new UTF8Encoding(false)).GetString(strm.ToArray());
			}
		}
		#region IBabelModel
		public virtual void RunOnChildren<T>(BabelModelAction<T> method, T auxData, bool runOnAll = true)
		{
			if(method == null) throw new ArgumentNullException("method");
			if(runOnAll) Code = (string) method("Code", typeof(string), Code, auxData);
			if(runOnAll) Message = (string) method("Message", typeof(string), Message, auxData);
			Params = (List<string>) method("Params", typeof(List<string>), Params, auxData);

		}

		public virtual bool RunOnChild<T>(string name, BabelModelAction<T> method, T auxData)
		{
			if(method == null) throw new ArgumentNullException("method");
			switch(name)
			{
				case "Code": Code = (string) method("Code", typeof(string), Code, auxData); return true;
				case "Message": Message = (string) method("Message", typeof(string), Message, auxData); return true;
				case "Params": Params = (List<string>) method("Params", typeof(List<string>), Params, auxData); return true;
				default: return false;
			}
		}
		#endregion
	}

	/// <summary>
	///  ServiceError defines the error response generated by Babel for service failures
	/// </summary>
	public class ServiceError : IBabelModel
	{
		/// <summary>
		/// Default constructor
		/// </summary>
		public ServiceError()
		{ 
			Tags = new List<string>();
			Errors = new List<Error>();
			Context = new Dictionary<string,Dictionary<string,string>>();
		}

		/// <summary>
		///  Time of the error
		/// </summary>
		public DateTime? Time { get; set; }

		/// <summary>
		///  Tags to categorize the error
		/// </summary>
		public List<string> Tags { get; set; }

		/// <summary>
		///  A list of errors that occurred
		/// </summary>
		public List<Error> Errors { get; set; }

		/// <summary>
		///  Context is a map of additional error details and context
		/// </summary>
		public Dictionary<string,Dictionary<string,string>> Context { get; set; }

		/// <summary>
		///  Details contains optional detailed error information, such as error messages
		///  or a stack trace specific to the given server environment
		/// </summary>
		public string Details { get; set; }

		/// <summary>
		///  Inner points to a service error propagated from another tier that is using Babel
		/// </summary>
		public ServiceError Inner { get; set; }

		public override string ToString()
		{
			var ser = new BabelJsonSerializer();
			using(var strm = (System.IO.MemoryStream)ser.Serialize(this))
			{
				return (new UTF8Encoding(false)).GetString(strm.ToArray());
			}
		}
		#region IBabelModel
		public virtual void RunOnChildren<T>(BabelModelAction<T> method, T auxData, bool runOnAll = true)
		{
			if(method == null) throw new ArgumentNullException("method");
			if(runOnAll) Time = (DateTime?) method("Time", typeof(DateTime?), Time, auxData);
			Tags = (List<string>) method("Tags", typeof(List<string>), Tags, auxData);
			Errors = (List<Error>) method("Errors", typeof(List<Error>), Errors, auxData);
			Context = (Dictionary<string,Dictionary<string,string>>) method("Context", typeof(Dictionary<string,Dictionary<string,string>>), Context, auxData);
			if(runOnAll) Details = (string) method("Details", typeof(string), Details, auxData);
			Inner = (ServiceError) method("Inner", typeof(ServiceError), Inner, auxData);

		}

		public virtual bool RunOnChild<T>(string name, BabelModelAction<T> method, T auxData)
		{
			if(method == null) throw new ArgumentNullException("method");
			switch(name)
			{
				case "Time": Time = (DateTime?) method("Time", typeof(DateTime?), Time, auxData); return true;
				case "Tags": Tags = (List<string>) method("Tags", typeof(List<string>), Tags, auxData); return true;
				case "Errors": Errors = (List<Error>) method("Errors", typeof(List<Error>), Errors, auxData); return true;
				case "Context": Context = (Dictionary<string,Dictionary<string,string>>) method("Context", typeof(Dictionary<string,Dictionary<string,string>>), Context, auxData); return true;
				case "Details": Details = (string) method("Details", typeof(string), Details, auxData); return true;
				case "Inner": Inner = (ServiceError) method("Inner", typeof(ServiceError), Inner, auxData); return true;
				default: return false;
			}
		}
		#endregion
	}

} 
