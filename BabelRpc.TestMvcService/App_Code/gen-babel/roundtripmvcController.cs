// <auto-generated />
// AUTO-GENERATED FILE - DO NOT MODIFY
// Generated from roundtrip.babel

using System;
using System.Collections.Generic;
using BabelRpc;

namespace BabelRpc.Demo
{ 
	/// <summary>
	///  Roundtripper service - see if the data you send it actually comes
	///  back in one piece!
	/// </summary>
	[System.CodeDom.Compiler.GeneratedCode("Babel", "")]
	public partial class RoundtripperController : BabelRpc.Mvc.BabelController<IRoundtripper>
	{ 
		class SendReceiveRequest : BabelRpc.Mvc.IBabelRequest
		{ 
			/// <summary>
			///  Send in a wholesome data structure
			/// </summary>
			public Wholesome Wholesome;

			/// <summary>
			///  Indicates if you want to change it
			/// </summary>
			public bool? Alter;

			#region IBabelRequest
			public void RunOnChildren<T>(BabelModelAction<T> method, T auxData, bool runOnAll = true)
			{
				Wholesome = (Wholesome) method("wholesome", typeof(Wholesome), Wholesome, auxData);
				if(runOnAll) Alter = (bool?) method("alter", typeof(bool?), Alter, auxData);
			}

			public bool RunOnChild<T>(string name, BabelModelAction<T> method, T auxData)
			{
				switch(name)
				{
					case "wholesome": Wholesome = (Wholesome) method("wholesome", typeof(Wholesome), Wholesome, auxData); return true;
					case "alter": Alter = (bool?) method("alter", typeof(bool?), Alter, auxData); return true;
					default: return false;
				}
			}

			public void SetDefaults()
			{
			}
			#endregion
		}

		/// <summary>
		/// Return back what was sent, changing it if desried
		/// </summary>
		/// <param name="wholesome"> Send in a wholesome data structure</param>
		/// <param name="alter"> Indicates if you want to change it</param>
		public Wholesome SendReceive()
		{
			var requestData = DeserializeRequest<SendReceiveRequest>();
			return m_businessLogic.SendReceive(requestData.Wholesome, requestData.Alter);
		}

		class SendRequest : BabelRpc.Mvc.IBabelRequest
		{ 
			/// <summary>
			///  Some nice data to file away 
			/// </summary>
			public Wholesome Wholesome;

			#region IBabelRequest
			public void RunOnChildren<T>(BabelModelAction<T> method, T auxData, bool runOnAll = true)
			{
				Wholesome = (Wholesome) method("wholesome", typeof(Wholesome), Wholesome, auxData);
			}

			public bool RunOnChild<T>(string name, BabelModelAction<T> method, T auxData)
			{
				switch(name)
				{
					case "wholesome": Wholesome = (Wholesome) method("wholesome", typeof(Wholesome), Wholesome, auxData); return true;
					default: return false;
				}
			}

			public void SetDefaults()
			{
			}
			#endregion
		}

		/// <summary>
		/// Send me some data - I know just what to do with it
		/// </summary>
		/// <param name="wholesome"> Some nice data to file away </param>
		public void Send()
		{
			var requestData = DeserializeRequest<SendRequest>();
			m_businessLogic.Send(requestData.Wholesome);
		}


		/// <summary>
		/// I'll send you back some data similar to what you sent
		/// </summary>
		public Wholesome Receive()
		{
			return m_businessLogic.Receive();
		}


		/// <summary>
		/// Returns a DefaultTest struct with the X value nulled out
		/// </summary>
		public DefaultTest ReturnNulledDefault()
		{
			return m_businessLogic.ReturnNulledDefault();
		}

		class AcceptNulledDefaultRequest : BabelRpc.Mvc.IBabelRequest
		{ 
			public DefaultTest D;

			#region IBabelRequest
			public void RunOnChildren<T>(BabelModelAction<T> method, T auxData, bool runOnAll = true)
			{
				D = (DefaultTest) method("d", typeof(DefaultTest), D, auxData);
			}

			public bool RunOnChild<T>(string name, BabelModelAction<T> method, T auxData)
			{
				switch(name)
				{
					case "d": D = (DefaultTest) method("d", typeof(DefaultTest), D, auxData); return true;
					default: return false;
				}
			}

			public void SetDefaults()
			{
			}
			#endregion
		}

		/// <summary>
		/// Accepts a DefaultTest struct and verifies that X is 32
		/// </summary>
		/// <param name="d"></param>
		public bool? AcceptNulledDefault()
		{
			var requestData = DeserializeRequest<AcceptNulledDefaultRequest>();
			return m_businessLogic.AcceptNulledDefault(requestData.D);
		}


		/// <summary>
		/// Let's be exceptional
		/// </summary>
		public bool? Fail()
		{
			return m_businessLogic.Fail();
		}
	}
}
